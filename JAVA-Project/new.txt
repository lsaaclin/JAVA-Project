java学习---new的对象怎么被内存回收
2019-07-08阅读 1.3K0

 java,使用new创建对象，并将该对象的引用返回...对象依然存在，不会被垃圾回收,是什么意思啊？
 
"我们在方法内部使用new创建对象，并将该对象的引用返回。如果该返回被一个引用接收，由于对象的引用不为0，对象依然存在，不会被垃圾回收。"

 User u = new User();

 如上面代码，简单说就是new User()的时候，会返回一个地址，并且将地址赋值给引用u，当这个引用被u持有的时候，java会认为这个对象时有用的，不会回收对象，如果你之后执行了好比说：

1

2

3

u = null;

//或

u = new User();

 这样的代码，那么这个u就不在持有之前对象的地址了，变成了空或者新的地址，这个时候如果没有其他引用持有了之前对象的地址，之前的对象就没有访问方法了，那么gc(垃圾回收器)运行的时候会认为这个对象没用了，将他从内存中释放掉。

 一句话：如果这个对象没有被   任何人  引用 它  ，就会被回收   注意回收的是new 的那个对象，

 来自  百度贴吧

  String a ; 与String a = new String ()有什么区别？
 这么形容，String a相当于你说“我想喝水”，但是只是说说，没有水也没有杯子。。。String a = new String()就是说“我想喝水”，并且别人给你了一个杯子。。。String a = "This sucks!"，就是你说“我想喝水”，然后给你一个装满水的杯子

 String  a;//a是一个引用，或者叫别名   
a== null;
a 没有指向一个对象
String a = new String ()
a != null;
a 指向了一个对象

 栈和堆的变化：

 String  a，只是声明了一个变量，存储在"栈"中。。。String a = new String()，不仅在栈中声明了这个变量，同时在“堆”中划分了一片区域（为空），变量存储只想这片区域的地址。。。String a = "This sucks!"，就是把“堆”中填充上"This sucks!"的内容

 String  source="abc"; //查找栈中是否存在“abc”的地址，没有，那么新建对象"abc",这个abc 好像是在静态区 引用变量source指向之
String str1="abc"; //同样子在栈中查找，存在，那么str1指向已经存在的“abc” 
String str2=new String("abc"); //在堆中新建对象"abc",引用str2指向之。

 类似于String  source=“”这样的对象赋值，不一定创建了一个对象（在已有的栈中查找是否已存在。），而new String（）一定是在堆中新建了一个对象。

 String  a：定义一个字符串类型的变量名为a的变量
String a = new String () ：这句活的作用是创建一个对象
String是数据类型，但不是字符串类型，这里指的是引用类型，是一个String类。
String ()是构造函数
new在堆内存中开辟一个空间，String ()完成构造函数的初始化动作后，把空间的地 址值赋值给a

 a是一个引用类型，通过a可以引用String类中的成员变量和成员方法，因为a有一个地址指向String类

 在函数中定义的一些      基本类型   的变量   和   对象的引用变量   都在   函数   的栈内存    中分配。 

 栈的内存回收：{   里面定义变量  }

 当在一段代码块定义一个变量时，Java就在栈中为这个变量分配内存空间，当超过变量的作用域后，Java会自动释放掉为该变量所分配的内存空间，该内存空间可以立即被另作他用。 

 堆内存回收：

  堆内存用来存放由new创建的对象和数组。   

   在堆中分配的内存，由Java虚拟机的自动垃圾回收器来管理。   

 在堆中产生了一个数组或对象后，还可以在栈中定义一个特殊的变量，让栈中这个变量的取值等于数组或对象在堆内存中的首地址，栈中的这个变量就成了数组或对象的引用变量。    

 引用变量就相当于是为数组或对象起的一个名称，以后就可以在程序中使用栈中的引用变量来访问堆中的数组或对象。    

 java中变量在内存中的分配

 1、类变量（static修饰的变量）：在程序加载时系统就为它在堆中开辟了内存，堆中的内存地址存放于栈以便于高速访问。静态变量的生命周期--一直持续到整个"系统"关闭

 2、实例变量：当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量（比如说类实例），然后根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的"物理位置"。 实例变量的生命周期--当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收“名单”中，但并不是马上就释放堆中内存

 3、局部变量：局部变量，由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放

 实际上，栈中的变量指向堆内存中的变量，这就是  Java 中的指针！